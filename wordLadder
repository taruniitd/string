#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int wordLadder(string start, string target, set<string> dict)
{
    map<string, vector<string>> umap;
    for(int i = 0; i < start.size(); i++)
    {
        string str = start.substr(0,i) + "*" + start.substr(i+1);
        umap[str].push_back(start);
    }
    
    for(auto it = dict.begin(); it != dict.end(); it++)
    {
        for(int i = 0; i < (*it).size(); i++)
        {
            string str = (*it).substr(0,i) + "*" + (*it).substr(i+1);
            umap[str].push_back(*it);
        }
    }
        
    queue<pair<string,int>> strQue;
    strQue.push(make_pair(start,1));
    map<string,int> visited;
    visited[start] = 1;
    cout << "Map ready :" << endl;
    while(!strQue.empty())
    {
        //cout << "queue size : " << strQue.size() << endl;
        pair<string,int> tStr = strQue.front();
        strQue.pop();
        //cout << "poped string = " << tStr.first << endl;
        if(tStr.first == target)
            return 1;
        cout << "cur string size = " << tStr.first.size() << endl;
        for(int i = 0; i < tStr.first.size(); i++)
        {
            string sStr = tStr.first.substr(0,i) + "*" + tStr.first.substr(i+1);
            vector<string> vectOut = umap[sStr];
            //cout << "vector size = " << vectOut.size();
            for(int j = 0; j < vectOut.size(); j++)
            {
                if(visited[vectOut[j]] == 0)
                {
                    cout << "pushing now :" << vectOut[j] << endl;
                    visited[vectOut[j]] = 1;
                    strQue.push(make_pair(vectOut[j], 1));
                }
            }
        }
    }
    return 0;
}

int main() {
    string start = "toon";
    string target = "plea";
    set<string> dict = {"poon", "plee", "same", "poie", "plea", "plie", "poin"};
    
    cout << "target word transformed : " << wordLadder(start, target, dict);

	return 0;
}
